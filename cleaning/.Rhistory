select( VoteId,VotePersonId, VotePersonName, VoteValueId)%>%
mutate(EventItemId = event_item_id, EventId = event_id, MatterId = event_item_matter_id )
all_votes <- rbind(all_votes, event_item_votes)
}
}
events_ids = events$EventId
for (event_id in event_ids) {
url_event_items = paste0("https://webapi.legistar.com/v1/nyc/Events/",event_id,"/EventItems")
response <- GET(url_event_items, query = initial_params)
if (status_code(response) != 200) {
stop("Failed to fetch data: HTTP status code", status_code(response))
}
# Extract content from the response as a character vector
event_items <- fromJSON(content(response, "text"), flatten = TRUE)
events_items_ids = event_items$EventItemId
for (event_item_id in event_item_ids) {
event_item_matter_id <- event_items %>%
filter(EventItemId == event_item_id) %>%
pull(EventItemMatterId)
url_event_items = paste0("https://webapi.legistar.com/v1/nyc/EventItems/",event_item_id,"/Votes")
# Query parameters with filtering for MatterTypeId equal to 1 or 10
response <- GET(url_event_items, query = initial_params)
if (status_code(response) != 200) {
stop("Failed to fetch data: HTTP status code", status_code(response))
}
# Extract content from the response as a character vector
event_item_votes <- fromJSON(content(response, "text"), flatten = TRUE)
event_item_votes = event_item_votes %>%
select( VoteId,VotePersonId, VotePersonName, VoteValueId)%>%
mutate(EventItemId = event_item_id, EventId = event_id, MatterId = event_item_matter_id )
all_votes <- rbind(all_votes, event_item_votes)
}
}
event_ids = events$EventId
for (event_id in event_ids) {
url_event_items = paste0("https://webapi.legistar.com/v1/nyc/Events/",event_id,"/EventItems")
response <- GET(url_event_items, query = initial_params)
if (status_code(response) != 200) {
stop("Failed to fetch data: HTTP status code", status_code(response))
}
# Extract content from the response as a character vector
event_items <- fromJSON(content(response, "text"), flatten = TRUE)
events_items_ids = event_items$EventItemId
for (event_item_id in event_item_ids) {
event_item_matter_id <- event_items %>%
filter(EventItemId == event_item_id) %>%
pull(EventItemMatterId)
url_event_items = paste0("https://webapi.legistar.com/v1/nyc/EventItems/",event_item_id,"/Votes")
# Query parameters with filtering for MatterTypeId equal to 1 or 10
response <- GET(url_event_items, query = initial_params)
if (status_code(response) != 200) {
stop("Failed to fetch data: HTTP status code", status_code(response))
}
# Extract content from the response as a character vector
event_item_votes <- fromJSON(content(response, "text"), flatten = TRUE)
event_item_votes = event_item_votes %>%
select( VoteId,VotePersonId, VotePersonName, VoteValueId)%>%
mutate(EventItemId = event_item_id, EventId = event_id, MatterId = event_item_matter_id )
all_votes <- rbind(all_votes, event_item_votes)
}
}
initial_params <- list(
token = "Uvxb0j9syjm3aI8h46DhQvnX5skN4aSUL0x_Ee3ty9M.ew0KICAiVmVyc2lvbiI6IDEsDQogICJOYW1lIjogIk5ZQyByZWFkIHRva2VuIDIwMTcxMDI2IiwNCiAgIkRhdGUiOiAiMjAxNy0xMC0yNlQxNjoyNjo1Mi42ODM0MDYtMDU6MDAiLA0KICAiV3JpdGUiOiBmYWxzZQ0KfQ"
)
all_votes <- data.frame()
for (event_id in 43) {
url_event_items = paste0("https://webapi.legistar.com/v1/nyc/Events/",event_id,"/EventItems")
response <- GET(url_event_items, query = initial_params)
if (status_code(response) != 200) {
stop("Failed to fetch data: HTTP status code", status_code(response))
}
# Extract content from the response as a character vector
event_items <- fromJSON(content(response, "text"), flatten = TRUE)
event_items_ids = event_items$EventItemId
for (event_item_id in event_item_ids) {
event_item_matter_id <- event_items %>%
filter(EventItemId == event_item_id) %>%
pull(EventItemMatterId)
url_event_items = paste0("https://webapi.legistar.com/v1/nyc/EventItems/",event_item_id,"/Votes")
# Query parameters with filtering for MatterTypeId equal to 1 or 10
response <- GET(url_event_items, query = initial_params)
if (status_code(response) != 200) {
stop("Failed to fetch data: HTTP status code", status_code(response))
}
# Extract content from the response as a character vector
event_item_votes <- fromJSON(content(response, "text"), flatten = TRUE)
event_item_votes = event_item_votes %>%
select( VoteId,VotePersonId, VotePersonName, VoteValueId)%>%
mutate(EventItemId = event_item_id, EventId = event_id, MatterId = event_item_matter_id )
all_votes <- rbind(all_votes, event_item_votes)
}
}
for (event_id in 43) {
url_event_items = paste0("https://webapi.legistar.com/v1/nyc/Events/",event_id,"/EventItems")
response <- GET(url_event_items, query = initial_params)
if (status_code(response) != 200) {
stop("Failed to fetch data: HTTP status code", status_code(response))
}
# Extract content from the response as a character vector
event_items <- fromJSON(content(response, "text"), flatten = TRUE)
event_items_ids = event_items$EventItemId
for (event_item_id in event_items_ids) {
event_item_matter_id <- event_items %>%
filter(EventItemId == event_item_id) %>%
pull(EventItemMatterId)
url_event_items = paste0("https://webapi.legistar.com/v1/nyc/EventItems/",event_item_id,"/Votes")
# Query parameters with filtering for MatterTypeId equal to 1 or 10
response <- GET(url_event_items, query = initial_params)
if (status_code(response) != 200) {
stop("Failed to fetch data: HTTP status code", status_code(response))
}
# Extract content from the response as a character vector
event_item_votes <- fromJSON(content(response, "text"), flatten = TRUE)
event_item_votes = event_item_votes %>%
select( VoteId,VotePersonId, VotePersonName, VoteValueId)%>%
mutate(EventItemId = event_item_id, EventId = event_id, MatterId = event_item_matter_id )
all_votes <- rbind(all_votes, event_item_votes)
}
}
View(event_items)
event_id = 60
url_event_items = paste0("https://webapi.legistar.com/v1/nyc/Events/",event_id,"/EventItems")
response <- GET(url_event_items, query = initial_params)
if (status_code(response) != 200) {
stop("Failed to fetch data: HTTP status code", status_code(response))
}
# Extract content from the response as a character vector
event_items <- fromJSON(content(response, "text"), flatten = TRUE)
View(event_items)
all_votes <- data.frame()
for (event_id in 60) {
url_event_items = paste0("https://webapi.legistar.com/v1/nyc/Events/",event_id,"/EventItems")
response <- GET(url_event_items, query = initial_params)
if (status_code(response) != 200) {
stop("Failed to fetch data: HTTP status code", status_code(response))
}
# Extract content from the response as a character vector
event_items <- fromJSON(content(response, "text"), flatten = TRUE)
event_items = event_items %>%
filter(EventItemActionId%in%c(5032,))
event_items_ids = event_items$EventItemId
for (event_item_id in event_items_ids) {
event_item_matter_id <- event_items %>%
filter(EventItemId == event_item_id) %>%
pull(EventItemMatterId)
url_event_items = paste0("https://webapi.legistar.com/v1/nyc/EventItems/",event_item_id,"/Votes")
# Query parameters with filtering for MatterTypeId equal to 1 or 10
response <- GET(url_event_items, query = initial_params)
if (status_code(response) != 200) {
stop("Failed to fetch data: HTTP status code", status_code(response))
}
# Extract content from the response as a character vector
event_item_votes <- fromJSON(content(response, "text"), flatten = TRUE)
event_item_votes = event_item_votes %>%
select( VoteId,VotePersonId, VotePersonName, VoteValueId)%>%
mutate(EventItemId = event_item_id, EventId = event_id, MatterId = event_item_matter_id )
all_votes <- rbind(all_votes, event_item_votes)
}
}
for (event_id in 60) {
url_event_items = paste0("https://webapi.legistar.com/v1/nyc/Events/",event_id,"/EventItems")
response <- GET(url_event_items, query = initial_params)
if (status_code(response) != 200) {
stop("Failed to fetch data: HTTP status code", status_code(response))
}
# Extract content from the response as a character vector
event_items <- fromJSON(content(response, "text"), flatten = TRUE)
event_items_ids = event_items$EventItemId
for (event_item_id in event_items_ids) {
event_item_matter_id <- event_items %>%
filter(EventItemId == event_item_id) %>%
pull(EventItemMatterId)
url_event_items = paste0("https://webapi.legistar.com/v1/nyc/EventItems/",event_item_id,"/Votes")
# Query parameters with filtering for MatterTypeId equal to 1 or 10
response <- GET(url_event_items, query = initial_params)
if (status_code(response) != 200) {
stop("Failed to fetch data: HTTP status code", status_code(response))
}
# Extract content from the response as a character vector
event_item_votes <- fromJSON(content(response, "text"), flatten = TRUE)
event_item_votes = event_item_votes %>%
select( VoteId,VotePersonId, VotePersonName, VoteValueId)%>%
mutate(EventItemId = event_item_id, EventId = event_id, MatterId = event_item_matter_id )
all_votes <- rbind(all_votes, event_item_votes)
}
}
event_items = event_items %>%
filter(EventItemMatterType%in%c("Resolution", "Land Use Application"))
View(event_items)
event_items = event_items %>%
filter(EventItemMatterType%in%c("Resolution", "Land Use Application"))%>%
filter(!is.na(EventItemPassedFlag))
View(event_items)
all_votes <- data.frame()
for (event_id in 60) {
url_event_items = paste0("https://webapi.legistar.com/v1/nyc/Events/",event_id,"/EventItems")
response <- GET(url_event_items, query = initial_params)
if (status_code(response) != 200) {
stop("Failed to fetch data: HTTP status code", status_code(response))
}
# Extract content from the response as a character vector
event_items <- fromJSON(content(response, "text"), flatten = TRUE)
event_items = event_items %>%
filter(EventItemMatterType%in%c("Resolution", "Land Use Application"))%>%
filter(!is.na(EventItemPassedFlag))
event_items_ids = event_items$EventItemId
for (event_item_id in event_items_ids) {
event_item_matter_id <- event_items %>%
filter(EventItemId == event_item_id) %>%
pull(EventItemMatterId)
event_item_passed <- event_items %>%
filter(EventItemId == event_item_id) %>%
pull(EventItemPassedFlag)
url_event_items = paste0("https://webapi.legistar.com/v1/nyc/EventItems/",event_item_id,"/Votes")
# Query parameters with filtering for MatterTypeId equal to 1 or 10
response <- GET(url_event_items, query = initial_params)
if (status_code(response) != 200) {
stop("Failed to fetch data: HTTP status code", status_code(response))
}
# Extract content from the response as a character vector
event_item_votes <- fromJSON(content(response, "text"), flatten = TRUE)
event_item_votes = event_item_votes %>%
select( VoteId,VotePersonId, VotePersonName, VoteValueId)%>%
mutate(EventItemId = event_item_id, EventId = event_id, MatterId = event_item_matter_id, Passed = event_item_passed )
all_votes <- rbind(all_votes, event_item_votes)
}
}
View(all_votes)
View(event_item_votes)
View(event_item_votes)
event_item_votes <- fromJSON(content(response, "text"), flatten = TRUE)
View(event_item_votes)
for (event_id in 60) {
url_event_items = paste0("https://webapi.legistar.com/v1/nyc/Events/",event_id,"/EventItems")
response <- GET(url_event_items, query = initial_params)
if (status_code(response) != 200) {
stop("Failed to fetch data: HTTP status code", status_code(response))
}
# Extract content from the response as a character vector
event_items <- fromJSON(content(response, "text"), flatten = TRUE)
event_items = event_items %>%
filter(EventItemMatterType%in%c("Resolution", "Land Use Application"))%>%
filter(!is.na(EventItemPassedFlag))
event_items_ids = event_items$EventItemId
for (event_item_id in event_items_ids) {
event_item_matter_id <- event_items %>%
filter(EventItemId == event_item_id) %>%
pull(EventItemMatterId)
event_item_passed <- event_items %>%
filter(EventItemId == event_item_id) %>%
pull(EventItemPassedFlag)
url_event_items = paste0("https://webapi.legistar.com/v1/nyc/EventItems/",event_item_id,"/Votes")
# Query parameters with filtering for MatterTypeId equal to 1 or 10
response <- GET(url_event_items, query = initial_params)
if (status_code(response) != 200) {
stop("Failed to fetch data: HTTP status code", status_code(response))
}
# Extract content from the response as a character vector
event_item_votes <- fromJSON(content(response, "text"), flatten = TRUE)
event_item_votes = event_item_votes %>%
select( VoteId,VotePersonId,VoteValueName, VotePersonName, VoteValueId)%>%
mutate(EventItemId = event_item_id, EventId = event_id, MatterId = event_item_matter_id, Passed = event_item_passed )
all_votes <- rbind(all_votes, event_item_votes)
}
}
all_votes <- data.frame()
for (event_id in 60) {
url_event_items = paste0("https://webapi.legistar.com/v1/nyc/Events/",event_id,"/EventItems")
response <- GET(url_event_items, query = initial_params)
if (status_code(response) != 200) {
stop("Failed to fetch data: HTTP status code", status_code(response))
}
# Extract content from the response as a character vector
event_items <- fromJSON(content(response, "text"), flatten = TRUE)
event_items = event_items %>%
filter(EventItemMatterType%in%c("Resolution", "Land Use Application"))%>%
filter(!is.na(EventItemPassedFlag))
event_items_ids = event_items$EventItemId
for (event_item_id in event_items_ids) {
event_item_matter_id <- event_items %>%
filter(EventItemId == event_item_id) %>%
pull(EventItemMatterId)
event_item_passed <- event_items %>%
filter(EventItemId == event_item_id) %>%
pull(EventItemPassedFlag)
url_event_items = paste0("https://webapi.legistar.com/v1/nyc/EventItems/",event_item_id,"/Votes")
# Query parameters with filtering for MatterTypeId equal to 1 or 10
response <- GET(url_event_items, query = initial_params)
if (status_code(response) != 200) {
stop("Failed to fetch data: HTTP status code", status_code(response))
}
# Extract content from the response as a character vector
event_item_votes <- fromJSON(content(response, "text"), flatten = TRUE)
event_item_votes = event_item_votes %>%
select( VoteId,VotePersonId,VoteValueName, VotePersonName, VoteValueId)%>%
mutate(EventItemId = event_item_id, EventId = event_id, MatterId = event_item_matter_id, Passed = event_item_passed )
all_votes <- rbind(all_votes, event_item_votes)
}
}
event_ids = events$EventId
#-------------------------------------------------------------------------------
#Getting City Council Events
#-------------------------------------------------------------------------------
# Query parameters with filtering for MatterTypeId equal to 1 or 10
initial_params <- list(
token = "Uvxb0j9syjm3aI8h46DhQvnX5skN4aSUL0x_Ee3ty9M.ew0KICAiVmVyc2lvbiI6IDEsDQogICJOYW1lIjogIk5ZQyByZWFkIHRva2VuIDIwMTcxMDI2IiwNCiAgIkRhdGUiOiAiMjAxNy0xMC0yNlQxNjoyNjo1Mi42ODM0MDYtMDU6MDAiLA0KICAiV3JpdGUiOiBmYWxzZQ0KfQ"
)
all_votes <- data.frame()
for (event_id in event_ids) {
url_event_items = paste0("https://webapi.legistar.com/v1/nyc/Events/",event_id,"/EventItems")
response <- GET(url_event_items, query = initial_params)
if (status_code(response) != 200) {
stop("Failed to fetch data: HTTP status code", status_code(response))
}
# Extract content from the response as a character vector
event_items <- fromJSON(content(response, "text"), flatten = TRUE)
event_items = event_items %>%
filter(EventItemMatterType%in%c("Resolution", "Land Use Application"))%>%
filter(!is.na(EventItemPassedFlag))
event_items_ids = event_items$EventItemId
for (event_item_id in event_items_ids) {
event_item_matter_id <- event_items %>%
filter(EventItemId == event_item_id) %>%
pull(EventItemMatterId)
event_item_passed <- event_items %>%
filter(EventItemId == event_item_id) %>%
pull(EventItemPassedFlag)
url_event_items = paste0("https://webapi.legistar.com/v1/nyc/EventItems/",event_item_id,"/Votes")
# Query parameters with filtering for MatterTypeId equal to 1 or 10
response <- GET(url_event_items, query = initial_params)
if (status_code(response) != 200) {
stop("Failed to fetch data: HTTP status code", status_code(response))
}
# Extract content from the response as a character vector
event_item_votes <- fromJSON(content(response, "text"), flatten = TRUE)
event_item_votes = event_item_votes %>%
select( VoteId,VotePersonId,VoteValueName, VotePersonName, VoteValueId)%>%
mutate(EventItemId = event_item_id, EventId = event_id, MatterId = event_item_matter_id, Passed = event_item_passed )
all_votes <- rbind(all_votes, event_item_votes)
}
}
View(all_votes)
initial_params <- list(
token = "Uvxb0j9syjm3aI8h46DhQvnX5skN4aSUL0x_Ee3ty9M.ew0KICAiVmVyc2lvbiI6IDEsDQogICJOYW1lIjogIk5ZQyByZWFkIHRva2VuIDIwMTcxMDI2IiwNCiAgIkRhdGUiOiAiMjAxNy0xMC0yNlQxNjoyNjo1Mi42ODM0MDYtMDU6MDAiLA0KICAiV3JpdGUiOiBmYWxzZQ0KfQ"
)
all_votes <- data.frame()
for (event_id in event_ids) {
url_event_items = paste0("https://webapi.legistar.com/v1/nyc/Events/",event_id,"/EventItems")
response <- GET(url_event_items, query = initial_params)
if (status_code(response) != 200) {
stop("Failed to fetch data: HTTP status code", status_code(response))
}
# Extract content from the response as a character vector
event_items <- fromJSON(content(response, "text"), flatten = TRUE)
event_items = event_items %>%
filter(EventItemMatterType%in%c("Resolution", "Land Use Application"))%>%
filter(!is.na(EventItemPassedFlag))
event_items_ids = event_items$EventItemId
for (event_item_id in event_items_ids) {
event_item_matter_id <- event_items %>%
filter(EventItemId == event_item_id) %>%
pull(EventItemMatterId)
event_item_passed <- event_items %>%
filter(EventItemId == event_item_id) %>%
pull(EventItemPassedFlag)
url_event_items = paste0("https://webapi.legistar.com/v1/nyc/EventItems/",event_item_id,"/Votes")
# Query parameters with filtering for MatterTypeId equal to 1 or 10
response <- GET(url_event_items, query = initial_params)
if (status_code(response) != 200) {
stop("Failed to fetch data: HTTP status code", status_code(response))
}
# Extract content from the response as a character vector
event_item_votes <- fromJSON(content(response, "text"), flatten = TRUE)
if (is.data.frame(event_item_votes)) {
event_item_votes = event_item_votes %>%
select( VoteId,VotePersonId,VoteValueName,VoteSort, VotePersonName, VoteValueId)%>%
mutate(EventItemId = event_item_id, EventId = event_id, MatterId = event_item_matter_id, Passed = event_item_passed )
all_votes <- rbind(all_votes, event_item_votes)
}
}
}
View(all_votes)
event_ids
View(all_votes)
write.csv(all_votes, file.path(d_data,"derived/legistar_api", "all_votes.csv"), row.names = FALSE)
View(event_item_votes)
View(event_items)
View(events)
#Crosswalk Districts to tracts
#Setting Paths
source(file.path(Sys.getenv("HOME"),"Documents/Github/developers","prelim.R"))
source(file.path(Sys.getenv("HOME"),"Documents/Github/developers","macros/functions.R"))
library(data.table)
library(tidyverse)
library(stringr)
library(sf)
library(tmap)    # for static and interactive maps
library(osmdata)
# Load the readxl package
library(readxl)
#Load in Tracts
tracts_nyc =st_read(file.path(d_data,"raw/shapefiles/tracts_2010_nyc", "tracts_2010_nyc.shp"))
tracts_nyc  =st_transform(tracts_nyc , crs = 4326)
#Adding State and County Codes
#Manhattan 061
#BK 047
#Queens 081
#BX 005
#SI 085
# Correspondence between borough names and state/county codes
correspondence <- data.frame(boro_name = c("Bronx", "Brooklyn", "Manhattan", "Queens", "Staten Island"),
state_code = c("36", "36", "36", "36", "36"),
county_code = c("005", "047", "061", "081", "085"))
tracts_nyc_code <- left_join(tracts_nyc, correspondence, by = "boro_name")
tracts_nyc_code = tracts_nyc_code %>%
mutate(geoid = paste0(state_code, county_code, ct2010))
tracts_nyc_final = tracts_nyc_code %>%
select(geoid, geometry)
#Load in City Council
nycc=  st_read(file.path(d_data,"raw/shapefiles/nycc_19d", "nycc.shp"))
nycc =st_transform(nycc, crs = 4326)
nycc = nycc %>%
select(district = CounDist)
nycc$dist_area <- st_area(nycc)
View(nycc)
intersect_tracts_nycc = st_intersection(tracts_nyc_final, nycc)
View(intersect_tracts_nycc)
intersect_tracts_nycc$dist_area <- st_area(intersect_tracts_nycc)
intersect_tracts_nycc = st_makevalid(intersect_tracts_nycc = )
# Remove any potential empty or degenerate geometries
intersect_tracts_nycc = intersect_tracts_nycc %>%
filter(!st_is_empty(.)) %>%
filter(as.numeric(st_area(.)) > 0)
intersect_tracts_nycc = intersect_tracts_nycc %>%
filter(!st_is_empty(.)) %>%
filter(as.numeric(st_area(.)) > 0)
# Remove any potential empty or degenerate geometries
intersect_tracts_nycc = intersect_tracts_nycc %>%
filter(!st_is_empty(.))
intersect_tracts_nycc$dist_area <- st_area(intersect_tracts_nycc)
intersect_tracts_nycc = st_make_valid(intersect_tracts_nycc)
intersect_tracts_nycc = intersect_tracts_nycc %>%
filter(!st_is_empty(.))
# Now calculate the area
intersect_tracts_nycc$dist_area <- st_area(intersect_tracts_nycc)
intersect_tracts_nycc = intersect_tracts_nycc %>%
as.data.frame()%>%
group_by(geoid) %>%
slice_max(order_by = dist_area, n = 1) %>%
ungroup()
View(tracts_nyc_code)
View(intersect_tracts_nycc)
#Crosswalk Districts to tracts
#Setting Paths
source(file.path(Sys.getenv("HOME"),"Documents/Github/developers","prelim.R"))
source(file.path(Sys.getenv("HOME"),"Documents/Github/developers","macros/functions.R"))
library(data.table)
library(tidyverse)
library(stringr)
library(sf)
library(tmap)    # for static and interactive maps
library(osmdata)
# Load the readxl package
library(readxl)
#Load in Tracts
tracts_nyc =st_read(file.path(d_data,"raw/shapefiles/tracts_2010_nyc", "tracts_2010_nyc.shp"))
tracts_nyc  =st_transform(tracts_nyc , crs = 4326)
#Adding State and County Codes
#Manhattan 061
#BK 047
#Queens 081
#BX 005
#SI 085
# Correspondence between borough names and state/county codes
correspondence <- data.frame(boro_name = c("Bronx", "Brooklyn", "Manhattan", "Queens", "Staten Island"),
state_code = c("36", "36", "36", "36", "36"),
county_code = c("005", "047", "061", "081", "085"))
tracts_nyc_code <- left_join(tracts_nyc, correspondence, by = "boro_name")
tracts_nyc_code = tracts_nyc_code %>%
mutate(geoid = paste0(state_code, county_code, ct2010))
tracts_nyc_final = tracts_nyc_code %>%
select(geoid, geometry)
#Load in City Council
nycc=  st_read(file.path(d_data,"raw/shapefiles/nycc_19d", "nycc.shp"))
nycc =st_transform(nycc, crs = 4326)
nycc = nycc %>%
select(district = CounDist)
nycc$dist_area <- st_area(nycc)
intersect_tracts_nycc = st_intersection(tracts_nyc_final, nycc)
# Clean and validate geometries before calculating area
intersect_tracts_nycc = st_make_valid(intersect_tracts_nycc)
# Remove any potential empty or degenerate geometries
intersect_tracts_nycc = intersect_tracts_nycc %>%
filter(!st_is_empty(.))
# Now calculate the area
intersect_tracts_nycc$dist_area <- st_area(intersect_tracts_nycc)
# Keeping Largest intersection
intersect_tracts_nycc = intersect_tracts_nycc %>%
as.data.frame()%>%
group_by(geoid) %>%
slice_max(order_by = dist_area, n = 1) %>%
ungroup()%>%
keep(geoid, district)
# Keeping Largest intersection
intersect_tracts_nycc = intersect_tracts_nycc %>%
as.data.frame()%>%
group_by(geoid) %>%
slice_max(order_by = dist_area, n = 1) %>%
ungroup()%>%
select(geoid, district)
write.csv(dist_exposure, file.path(d_data,"derived", "nyc_geoid_cc_xw.csv"), row.names = FALSE)
write.csv(intersect_tracts_nycc, file.path(d_data,"derived", "nyc_geoid_cc_xw.csv"), row.names = FALSE)
